##############################################################
## PREREQUISITES                                            ##
##############################################################

############################################################################
# Standalone docker host
############################################################################

1. Prepare a database configuration
cp env/database.env.example env/database.env
vi env/database.env

2. Create required folders
mkdir -p frontend-certs letsencrypt plugins redmine-backup redmine-file

3. Deploy redmine stack
3.1 Prepare stack secrets in redmine-stack-prod.yml
3.2 Deploy new stack "redmine"
docker stack deploy -c ./redmine-stack.yml -c ./redmine-stack-prod.yml redmine

4. Deploy MTA stack
4.1 Prepare stack secrets in mta-stack-prod.yml
4.2 Deploy new stack "mta"

############################################################################
# Docker stack on multiple hosts
############################################################################

# Note: Keep in mind that to use the ingress network in the swarm, you need to have the
# following ports open between the swarm nodes before you enable swarm mode:

- Port 7946 TCP/UDP for container network discovery.
- Port 4789 UDP for the container ingress network.

1. configure firewall on the all VMs:
firewall-cmd --add-port=4000/tcp --permanent --zone=public
firewall-cmd --add-port=2376/tcp --permanent --zone=public
firewall-cmd --add-port=2377/tcp --permanent --zone=public
firewall-cmd --add-port=7946/tcp --permanent --zone=public
firewall-cmd --add-port=7946/udp --permanent --zone=public
firewall-cmd --add-port=4789/udp --permanent --zone=public
firewall-cmd --reload


2. Create docker machines
docker-machine create --driver generic --generic-ip-address=IP_HOST1 --generic-ssh-key ~/.ssh/id_rsa vm-node1
docker-machine create --driver generic --generic-ip-address=IP_HOST2 --generic-ssh-key ~/.ssh/id_rsa vm-node2
docker-machine create --driver generic --generic-ip-address=IP_HOST3 --generic-ssh-key ~/.ssh/id_rsa vm-node3

3. Init docker stack
3.1 Create manager

$ docker-machine ssh vm-node1 "docker swarm init --advertise-addr=IP_HOST1"

# Note: To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
#       To add a manager to this swarm, run 'docker swarm join-token worker' and follow the instructions.

3.2 Add workers to the stack
3.2.1 Add two workers via ssh connection
docker-machine ssh vm-node2 "docker swarm join --token TOKEN IP_HOST1:2377"
docker-machine ssh vm-node3 "docker swarm join --token TOKEN IP_HOST1:2377"

or

3.2.1 Add worker via docker shell environment
# Run the given command to configure your shell to talk to vm-node2
eval $(docker-machine env vm-node2)

# Then run the following command to join vm-node2 to the manager
docker swarm join --token TOKEN IP_HOST1:2377

# Then, do the same for vm-node3
eval $(docker-machine env vm-node3)
docker swarm join --token TOKEN IP_HOST1:2377

# Finally, unset all variables and return to your host
eval $(docker-machine env -u	)

3.3 View nodes in the created stack (where is the vm-node1 running as manager)
docker-machine ssh vm-node1 "docker node ls"


4. Let's set a node type
#  vm-node3 should works as db node
docker node update --label-add type=db vm-node3

# vm-node1 and vm-node2 should work as web node
docker node update --label-add type=web vm-node1
docker node update --label-add type=web vm-node2

# Delete label from the node vm-node2
docker node update --label-rm type vm-node2


5. Deploy stack - run from the my host
# copy project on the nodes
for i in "vm-node1 vm-node2 vm-node3";
  do
    docker-machine ssh vm-node${i} "mkdir -p /var/www"
    docker-machine scp -r sdaminfo-redmine ${i}:/var/www/redmine
    docker-machine ssh vm-node${i} "mkdir -p /var/www/redmine/data/{plugins,db-backups,files}"
done

# deploy stack
docker-machine ssh vm-node1 'cd /var/www/redmine && docker stack deploy -c ./redmine-stack.yml redmine'



##############################################################
##          UPGRADE REDMINE                                 ##
##############################################################

# Upgrade database
1. Delete tables from redmine database - fix error Mysql2::Error: Table 'queries_roles' already exists
DROP TABLE `redmine`.`queries_roles`;
DROP TABLE `redmine`.`custom_fields_roles`;
DROP TABLE `redmine`.`email_addresses`;
DROP TABLE `redmine`.`roles_managed_roles`;
DROP TABLE `redmine`.`imports`;
DROP TABLE `redmine`.`import_items`;
DROP TABLE `redmine`.`custom_field_enumerations`;

2. Run db upgrade
docker container exec -w /usr/src/redmine 9cd58c471e3d sh -c "bundle exec rake db:migrate RAILS_ENV=production"

# Upgrade plugins
docker container exec -w /usr/src/redmine 9cd58c471e3d sh -c "bundle exec rake redmine:plugins:migrate RAILS_ENV=production"

# Restart service
docker stack services <stack_name>
docker service update --force SRV_ID
  where SRV_ID - ID of redmine-backend service


##### Tips
1. Update configs at "redmine_nginx-redmine.conf" service
docker service update --config-rm=redmine_nginx-redmine.conf --force $(docker service ls -f "name=redmine_redmine-frontend" -q)
docker service update --config-rm=redmine_nginx.conf --force $(docker service ls -f "name=redmine_redmine-frontend" -q)
docker config rm redmine_nginx-redmine.conf
docker config rm redmine_nginx.conf
docker stack deploy -c ./redmine-stack.yml redmine
docker container prune -f

2. Update frontend service
docker service update --force $(docker service ls -f "name=redmine_redmine-frontend" -q)
docker stack deploy -c ./redmine-stack.yml redmine
docker container prune -f


########################################################################################################################
#### CERTBOT configuration
########################################################################################################################

# Generate a LetsEncrypt certificate and private key for the domain rm.bolyshev.com

1. Run the following command when the redmine stack already up an running

docker run --rm -v /opt/www/logs:/var/log/letsencrypt:rw -v /opt/www/redmine/letsencrypt:/etc/letsencrypt:rw -v redmine_frontend-www:/var/www:rw \
   certbot/certbot certonly --webroot -w /var/www --email admin@bolyshev.com -d rm.bolyshev.com --agree-tos

# You should get the following
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator webroot, Installer None

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about our work
encrypting the web, EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: Yes
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for rm.bolyshev.com
Using the webroot path /var/www for all unmatched domains.
Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/rm.bolyshev.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/rm.bolyshev.com/privkey.pem
   Your cert will expire on 2019-01-08. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le


#
2. Renew certificates
00 23 * * * cd /opt/www/redmine && docker run --rm -v /opt/www/logs:/var/log/letsencrypt:rw -v /opt/www/redmine/letsencrypt:/etc/letsencrypt:rw -v redmine_frontend-www:/var/www:rw certbot/certbot renew

Saving debug log to /var/log/letsencrypt/letsencrypt.log

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Processing /etc/letsencrypt/renewal/rm.bolyshev.com.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Cert not yet due for renewal

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

The following certs are not due for renewal yet:
  /etc/letsencrypt/live/rm.bolyshev.com/fullchain.pem expires on 2019-01-08 (skipped)
No renewals were attempted.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

######### Docker host MTA configuration ##################
# http://www.redmine.org/projects/redmine/wiki/EmailConfiguration
# http://doc.nethence.com/docker/postfix
#
# /etc/postfix/main.cf
queue_directory = /var/spool/postfix
command_directory = /usr/sbin
daemon_directory = /usr/libexec/postfix
data_directory = /var/lib/postfix
mail_owner = postfix
myhostname = rm.bolyshev.com
mydomain = bolyshev.com
myorigin = $mydomain
inet_interfaces = localhost,172.17.0.1,172.18.0.1
inet_protocols = all
mydestination = $myhostname, localhost.$mydomain, localhost
unknown_local_recipient_reject_code = 550
mynetworks = 127.0.0.0/8,172.18.0.0/16,172.17.0.0/16
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
